events {}

http {
    # Conditional logging for 502 only
    map $status $log_502 {
        default 0;
        502     1;
    }
    # Custom log format
    log_format custom_502_log '$remote_addr - $remote_user [$time_local] '
                          '"$request" $status $body_bytes_sent '
                          '"$http_referer" "$http_user_agent" '
                          'upstream: $upstream_addr, upstream_status: $upstream_status, '
                          'request_time: $request_time, upstream_response_time: $upstream_response_time, '
                          'host: $host, '
                          'full_request: "$scheme://$host$request_uri"';
    # Log 502s to stdout
    access_log /dev/stdout custom_502_log if=$log_502;
    # error_log /dev/stdout info;
    # Use local dnsmasq as DNS server, ipv6=off disables ipv6!
    resolver 127.0.0.1:5353 valid=30s ipv6=off;
    # Extraction of the subdomain, aka what is before the first dot!
    map $host $subdomain {
        default "";
        ~^(?<sub>[^.]+)\.client.oauth2.fbktesting.fbk.eu$ $sub;
    }

    # Mapping of the subdomain to target the correct
    # EXTERNAL PROXY SIDE
    map $subdomain $target_upstream_external {
        default "";
        keycloak       keycloak.client.oauth2.fbktesting.fbk.eu:8003;
        oauth2proxy      oauth2proxy.client.oauth2.fbktesting.fbk.eu:8001;
    }
    # INTERNAL PROXY SIDE
    map $subdomain $target_upstream_internal {
        default "";
        resource-server         resource-server.client.oauth2.fbktesting.fbk.eu:10012;
    }
    # INTERNAL PROXY SIDE SERVER
    server {
        listen 192.168.1.2:8002 bind;
        server_name .client.oauth2.fbktesting.fbk.eu;

        location / {
            allow 192.168.1.95;
            allow 192.168.1.2;

            deny all;

            # Dynamic proxy_pass using upstream value from map
            proxy_pass https://$target_upstream_internal;

            proxy_set_header Host $host;
            proxy_set_header CustomFBKTesting-Real-IP $remote_addr;
            proxy_set_header CustomFBKTesting-Forwarded-For $proxy_add_x_forwarded_for;

            # Optional fallback
            if ($target_upstream_internal = "") {
                return 502;
            }
        }
    }
    # EXTERNAL PROXY SIDE SERVER
    server {
        listen 10.0.2.1:8112 ssl bind;
        server_name .client.oauth2.fbktesting.fbk.eu;

        # --- SSL CERTIFICATES ---
        # The full certificate chain (leaf cert + any intermediate CAs, none because I have only the root), signed by your local CA
        ssl_certificate     /etc/nginx/certs/resource-server-proxy.crt;
        # The private key corresponding to the above certificate
        ssl_certificate_key /etc/nginx/certs/resource-server-proxy.key;

        # --- SSL/TLS SETTINGS ---
        # Accept only recent and secure TLS versions
        ssl_protocols TLSv1.2 TLSv1.3;
        # Use only strong ciphers and avoid MD5 or NULL
        ssl_ciphers HIGH:!aNULL:!MD5;
        # Prefer the server's cipher choice over the client's
        ssl_prefer_server_ciphers on;

        # OPTIONAL: Some clients in the enterprise setting use mTLS.
        # I leave the possibility to implement it by adding the cert one day and
        # decrementing the following lines
        # ssl_client_certificate /etc/nginx/certs/...;  # CA to verify client certs
        # ssl_verify_client optional;  # or 'on' for mandatory verification

        location / {

            allow 10.0.2.11;
            deny all;

            # Dynamic proxy_pass using upstream value from map
            proxy_pass http://$target_upstream_external;

            proxy_set_header Host $host;
            proxy_set_header CustomFBKTesting-Real-IP $remote_addr;
            proxy_set_header CustomFBKTesting-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header CustomFBKTesting-Forwarded-Proto $scheme;
            proxy_set_header CustomFBKTesting-Forwarded-Port $server_port;

            # Optional fallback
            if ($target_upstream_external = "") {
                return 502;
            }
        }
    }
}