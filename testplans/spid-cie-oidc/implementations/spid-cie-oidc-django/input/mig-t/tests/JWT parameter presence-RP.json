{
  "test suite": {
    "name": "RP",
    "description": "JWT parameter presence",
    "filter messages": true
  },
  "tests": [
    {
      "test": {
        "name": "Does entity configuration contain the exp parameter",
        "description": "To accomplish this test, the Entity configuration of the interested entity is taken, the payload is decoded (Base64 encoding) and the presence of the exp parameter is checked",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response RP",
            "decode operations": [
              {
                "from": "body",
                "decode param": "[\\s\\S]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.exp",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does entity configuration contain the iat parameter",
        "description": "To accomplish this test, the Entity configuration of the interested entity is taken, the payload is decoded (Base64 encoding) and the presence of the iat parameter is checked",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response RP",
            "decode operations": [
              {
                "from": "body",
                "decode param": "[\\s\\S]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.iat",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does entity configuration contain the iss parameter",
        "description": "To accomplish this test, the Entity configuration of the interested entity is taken, the payload is decoded (Base64 encoding) and the presence of the iss parameter is checked",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response RP",
            "decode operations": [
              {
                "from": "body",
                "decode param": "[\\s\\S]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.iss",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does entity configuration contain the jwks parameter",
        "description": "To accomplish this test, the Entity configuration of the interested entity is taken, the payload is decoded (Base64 encoding) and the presence of the jwks parameter is checked",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response RP",
            "decode operations": [
              {
                "from": "body",
                "decode param": "[\\s\\S]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.jwks",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does entity configuration contain the metadata parameter",
        "description": "To accomplish this test, the Entity configuration of the interested entity is taken, the payload is decoded (Base64 encoding) and the presence of the metadata parameter is checked",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response RP",
            "decode operations": [
              {
                "from": "body",
                "decode param": "[\\s\\S]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.metadata",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does entity configuration contain the sub parameter",
        "description": "To accomplish this test, the Entity configuration of the interested entity is taken, the payload is decoded (Base64 encoding) and the presence of the sub parameter is checked",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response RP",
            "decode operations": [
              {
                "from": "body",
                "decode param": "[\\s\\S]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.sub",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the RP Authentication Request's JWT contain the 'acr_values' parameter",
        "description": "The Authentication request is taken, the JWT Token in the request parameter base64url decoded and the presence of the 'acr_values' parameter is checked. If it is missing, than the RP is not compliant with the specifications",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Authentication request",
            "decode operations": [
              {
                "from": "url",
                "decode param": "request",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.acr_values",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the RP Authentication Request's JWT contain the 'aud' parameter",
        "description": "The Authentication request is taken, the JWT Token in the request parameter base64url decoded and the presence of the 'aud' parameter is checked. If it missing, than the RP is not compliant with the specifications",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Authentication request",
            "decode operations": [
              {
                "from": "url",
                "decode param": "request",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.aud",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the RP Authentication Request's JWT contain the 'exp' parameter",
        "description": "The Authentication request is taken, the JWT Token in the request parameter base64url decoded and the presence of the 'exp' parameter is checked. If it is missing, than the RP is not compliant with the specifications",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Authentication request",
            "decode operations": [
              {
                "from": "url",
                "decode param": "request",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.exp",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the RP Authentication Request's JWT contain the 'client_id' parameter",
        "description": "In this test the request parameter of the Authentication Request is taken, the payload decrypted and the presence of the 'client_id' parameter is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Authentication request",
            "decode operations": [
              {
                "from": "url",
                "decode param": "request",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.client_id",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the JWT header of the Authentication Request contain the kid parameter",
        "description": "In this test the request parameter of the Authentication Request is taken, and the presence of the 'kid' parameter is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Authentication request",
            "decode operations": [
              {
                "from": "url",
                "decode param": "request",
                "type": "jwt",
                "checks": [
                  {
                    "in": "header",
                    "check": "$.kid",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the RP Authentication Request's JWT contain the 'iat' parameter",
        "description": "The Authentication request is taken, the JWT Token in the request parameter base64url decoded and the presence of the 'iat' parameter is checked. If it is missing, than the RP is not compliant with the specifications",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Authentication request",
            "decode operations": [
              {
                "from": "url",
                "decode param": "request",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.iat",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the RP Authentication Request's JWT contain the 'iss' parameter",
        "description": "The Authentication request is taken, the JWT Token in the request parameter base64url decoded and the presence of the 'iss' parameter is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Authentication request",
            "decode operations": [
              {
                "from": "url",
                "decode param": "request",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.iss",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the RP Authentication Request's JWT contain the 'state' parameter",
        "description": "The Authentication request is taken, the JWT Token in the request parameter base64url decoded and the presence of the 'state' parameter is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Authentication request",
            "decode operations": [
              {
                "from": "url",
                "decode param": "request",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.state",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the RP Authentication Request's JWT contain the 'ui_locales' parameter",
        "description": "The Authentication request is taken, the JWT Token in the request parameter base64url decoded and the presence of the 'ui_locales' parameter is checked. If it is missing, the RP is not compliant with the specifications",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Authentication request",
            "decode operations": [
              {
                "from": "url",
                "decode param": "request",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.ui_locales",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the RP Authentication Request's JWT contain the 'nonce' parameter",
        "description": "The Authentication request is taken, the JWT Token in the request parameter base64url decoded and the presence of the 'nonce' parameter is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Authentication request",
            "decode operations": [
              {
                "from": "url",
                "decode param": "request",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.nonce",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the RP Authentication Request's JWT contain the 'prompt' parameter",
        "description": "The Authentication request is taken, the JWT Token in the request parameter base64url decoded and the presence of the 'prompt' parameter is checked. If it is missing, than the RP is not compliant with the specifications",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Authentication request",
            "decode operations": [
              {
                "from": "url",
                "decode param": "request",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.prompt",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the RP Authentication Request's JWT contain the 'redirect_uri' parameter",
        "description": "The Authentication request is taken, the JWT Token in the request parameter base64url decoded and the presence of the 'redirect_uri' parameter",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Authentication request",
            "decode operations": [
              {
                "from": "url",
                "decode param": "request",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.redirect_uri",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the RP Authentication Request's JWT contain the 'response_type' parameter",
        "description": "The Authentication request is taken, the JWT Token in the request parameter base64url decoded and the presence of the 'response_type' parameter is checked",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Authentication request",
            "decode operations": [
              {
                "from": "url",
                "decode param": "request",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.response_type",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the RP Authentication Request contain the 'scope' parameter",
        "description": "The Authentication request is taken, the JWT Token in the request parameter base64url decoded and the presence of the 'scope' parameter is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Authentication request",
            "decode operations": [
              {
                "from": "url",
                "decode param": "request",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.scope",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the RP's entity configuration contain the trust_marks parameter",
        "description": "To accomplish this test, the Entity configuration of the RP is taken, the payload is decoded (Base64 encoding) and the presence of the trust_marks parameter is checked.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response RP",
            "decode operations": [
              {
                "from": "body",
                "decode param": "[\\s\\S]*",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.trust_marks",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the signed JWT assertion contain the aud claim",
        "description": "This test can be performed by taking the JWT present in the 'client_assertion' field of the RP's request, base64url decoding the payload and checking if the aud claim is present.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token request",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=client_assertion=)([^&]+)",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.aud",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the signed JWT assertion contain the exp claim",
        "description": "This test can be performed by taking the JWT present in the 'client_assertion' field of the RP's request, base64url decoding the payload and checking if the exp claim is present",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token request",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=client_assertion=)([^&]+)",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.exp",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the signed JWT assertion contain the iat claim",
        "description": "This test can be performed by taking the JWT present in the 'client_assertion' field of the RP's request, base64url decoding the payload and checking if the iat claim is present.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token request",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=client_assertion=)([^&]+)",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.iat",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the JWT payload contain 'iss' claim",
        "description": "This test can be performed by taking the JWT present in the 'client_assertion' field of the RP's request, base64url decoding the payload and checking if the iss claim is present.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token request",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=client_assertion=)([^&]+)",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.iss",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the signed JWT assertion contain the jti claim",
        "description": "This test can be performed by taking the JWT present in the 'client_assertion' field of the RP's request, base64url decoding the payload and checking if the jti claim is present.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token request",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=client_assertion=)([^&]+)",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.jti",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the signed JWT assertion contain the sub claim",
        "description": "This test can be performed by taking the JWT present in the 'client_assertion' field of the RP's request, base64url decoding the payload and checking if the sub claim is present.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Token request",
            "decode operations": [
              {
                "from": "body",
                "decode param": "(?<=client_assertion=)([^&]+)",
                "type": "jwt",
                "checks": [
                  {
                    "in": "payload",
                    "check": "$.sub",
                    "is present": "true"
                  }
                ]
              }
            ]
          }
        ]
      }
    }
  ]
}