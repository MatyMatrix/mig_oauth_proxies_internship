{
  "test suite": {
    "name": "SA",
    "description": "nested JWT parameter type",
    "filter messages": true
  },
  "tests": [
    {
      "test": {
        "name": "Does the issued oauth_resource Trust Mark contain a correct claims claim",
        "description": "In this test, a Trust Mark issued for an AA (oauth_resource profile) must be taken, decrypted and the value of the claims claim is checked to be a list",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Statement response OP",
            "decode operation": [
              {
                "from": "body",
                "type": "jwt",
                "decode param": "[\\s\\S]*",
                "decode operation": [
                  {
                    "from": "jwt payload",
                    "type": "jwt",
                    "decode param": "$.trust_marks[0].trust_mark",
                    "check": [
                      {
                        "in": "payload",
                        "check regex": "claims.^\\[\\s*\"[^\"]*\"(?:,\\s*\"[^\"]*\")*\\s*\\]$"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the Trust Mark contain correcty type of id_code claim",
        "description": "In this test, an issued Trust Mark must be taken, decrypted and the value of the id_code claim must be a JSON Object",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Statement response OP",
            "decode operation": [
              {
                "from": "body",
                "type": "jwt",
                "decode param": "[\\s\\S]*",
                "decode operation": [
                  {
                    "from": "jwt payload",
                    "type": "jwt",
                    "decode param": "$.trust_marks[0].trust_mark",
                    "check": [
                      {
                        "in": "payload",
                        "check regex": "id_code.^\\{(\\s*\"[^\"]*\"\\s*:\\s*(?:\"[^\"]*\",?|\\[[\\S\\s]*\\],?|\\{[\\S\\s]*\\},?)\\s*)*\\}$"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the Trust Mark contain correct type of logo_uri claim",
        "description": "In this test, an issued Trust Mark must be taken, decrypted and the value of the logo_uri claim is an URL",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Statement response OP",
            "decode operation": [
              {
                "from": "body",
                "type": "jwt",
                "decode param": "[\\s\\S]*",
                "decode operation": [
                  {
                    "from": "jwt payload",
                    "type": "jwt",
                    "decode param": "$.trust_marks[0].trust_mark",
                    "check": [
                      {
                        "in": "payload",
                        "check regex": "logo_uri.https:\\/\\/(www\\.)?[-\\w@:%.\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-\\w()@:%\\+.~#?&\\/\\/=]*)"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the issued oauth_resource Trust Mark contain a correct policy_uri claim",
        "description": "In this test, a Trust Mark issued for an AA (oauth_resource profile) must be taken, decrypted and the policy_uri claim in it is checked. Its value has to be an URL",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Statement response OP",
            "decode operation": [
              {
                "from": "body",
                "type": "jwt",
                "decode param": "[\\s\\S]*",
                "decode operation": [
                  {
                    "from": "jwt payload",
                    "type": "jwt",
                    "decode param": "$.trust_marks[0].trust_mark",
                    "check": [
                      {
                        "in": "payload",
                        "check regex": "policy_uri.https:\\/\\/(www\\.)?[-\\w@:%.\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-\\w()@:%\\+.~#?&\\/\\/=]*)"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the issued oauth_resource Trust Mark contain a correct tos_uri claim",
        "description": "In this test, a Trust Mark issued for an AA (oauth_resource profile) must be taken, decrypted and the tos_uri claim is checked to be an URL",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Statement response OP",
            "decode operation": [
              {
                "from": "body",
                "type": "jwt",
                "decode param": "[\\s\\S]*",
                "decode operation": [
                  {
                    "from": "jwt payload",
                    "type": "jwt",
                    "decode param": "$.trust_marks[0].trust_mark",
                    "check": [
                      {
                        "in": "payload",
                        "check regex": "tos_uri.https:\\/\\/(www\\.)?[-\\w@:%.\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-\\w()@:%\\+.~#?&\\/\\/=]*)"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the Trust Mark contain a correct iss claim",
        "description": "In this test, an issued Trust Mark must be taken, decrypted and the iss claim in it is checked. Its value has to be an URL",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Statement response OP",
            "decode operation": [
              {
                "from": "body",
                "type": "jwt",
                "decode param": "[\\s\\S]*",
                "decode operation": [
                  {
                    "from": "jwt payload",
                    "type": "jwt",
                    "decode param": "$.trust_marks[0].trust_mark",
                    "check": [
                      {
                        "in": "payload",
                        "check regex": "iss.https:\\/\\/(www\\.)?[-\\w@:%.\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-\\w()@:%\\+.~#?&\\/\\/=]*)"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the issued oauth_resource Trust Mark contain a correct service_documentation claim",
        "description": "In this test, a Trust Mark issued for an AA (oauth_resource profile) is taken and the service_documentation claim is checked to be an URL",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Statement response OP",
            "decode operation": [
              {
                "from": "body",
                "type": "jwt",
                "decode param": "[\\s\\S]*",
                "decode operation": [
                  {
                    "from": "jwt payload",
                    "type": "jwt",
                    "decode param": "$.trust_marks[0].trust_mark",
                    "check": [
                      {
                        "in": "payload",
                        "check regex": "service_documentation.https:\\/\\/(www\\.)?[-\\w@:%.\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-\\w()@:%\\+.~#?&\\/\\/=]*)"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the Trust Mark contain a correct sub claim",
        "description": "In this test, an issued Trust Mark must be taken, decrypted and the sub claim in it is checked. Its value has to be an URL",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Statement response OP",
            "decode operation": [
              {
                "from": "body",
                "type": "jwt",
                "decode param": "[\\s\\S]*",
                "decode operation": [
                  {
                    "from": "jwt payload",
                    "type": "jwt",
                    "decode param": "$.trust_marks[0].trust_mark",
                    "check": [
                      {
                        "in": "payload",
                        "check regex": "sub.https:\\/\\/(www\\.)?[-\\w@:%.\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-\\w()@:%\\+.~#?&\\/\\/=]*)"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the issued oauth_resource Trust Mark contain a correct claims claim",
        "description": "In this test, a Trust Mark issued for an AA (oauth_resource profile) must be taken, decrypted and the value of the claims claim is checked to be a list",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Statement response RP",
            "decode operation": [
              {
                "from": "body",
                "type": "jwt",
                "decode param": "[\\s\\S]*",
                "decode operation": [
                  {
                    "from": "jwt payload",
                    "type": "jwt",
                    "decode param": "$.trust_marks[0].trust_mark",
                    "check": [
                      {
                        "in": "payload",
                        "check regex": "claims.^\\[\\s*\"[^\"]*\"(?:,\\s*\"[^\"]*\")*\\s*\\]$"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the Trust Mark contain correcty type of id_code claim",
        "description": "In this test, an issued Trust Mark must be taken, decrypted and the value of the id_code claim must be a JSON Object",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Statement response RP",
            "decode operation": [
              {
                "from": "body",
                "type": "jwt",
                "decode param": "[\\s\\S]*",
                "decode operation": [
                  {
                    "from": "jwt payload",
                    "type": "jwt",
                    "decode param": "$.trust_marks[0].trust_mark",
                    "check": [
                      {
                        "in": "payload",
                        "check regex": "id_code.^\\{(\\s*\"[^\"]*\"\\s*:\\s*(?:\"[^\"]*\",?|\\[[\\S\\s]*\\],?|\\{[\\S\\s]*\\},?)\\s*)*\\}$"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the Trust Mark contain correct type of logo_uri claim",
        "description": "In this test, an issued Trust Mark must be taken, decrypted and the value of the logo_uri claim is an URL",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Statement response RP",
            "decode operation": [
              {
                "from": "body",
                "type": "jwt",
                "decode param": "[\\s\\S]*",
                "decode operation": [
                  {
                    "from": "jwt payload",
                    "type": "jwt",
                    "decode param": "$.trust_marks[0].trust_mark",
                    "check": [
                      {
                        "in": "payload",
                        "check regex": "logo_uri.https:\\/\\/(www\\.)?[-\\w@:%.\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-\\w()@:%\\+.~#?&\\/\\/=]*)"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the issued oauth_resource Trust Mark contain a correct policy_uri claim",
        "description": "In this test, a Trust Mark issued for an AA (oauth_resource profile) must be taken, decrypted and the policy_uri claim in it is checked. Its value has to be an URL",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Statement response RP",
            "decode operation": [
              {
                "from": "body",
                "type": "jwt",
                "decode param": "[\\s\\S]*",
                "decode operation": [
                  {
                    "from": "jwt payload",
                    "type": "jwt",
                    "decode param": "$.trust_marks[0].trust_mark",
                    "check": [
                      {
                        "in": "payload",
                        "check regex": "policy_uri.https:\\/\\/(www\\.)?[-\\w@:%.\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-\\w()@:%\\+.~#?&\\/\\/=]*)"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the issued oauth_resource Trust Mark contain a correct tos_uri claim",
        "description": "In this test, a Trust Mark issued for an AA (oauth_resource profile) must be taken, decrypted and the tos_uri claim is checked to be an URL",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Statement response RP",
            "decode operation": [
              {
                "from": "body",
                "type": "jwt",
                "decode param": "[\\s\\S]*",
                "decode operation": [
                  {
                    "from": "jwt payload",
                    "type": "jwt",
                    "decode param": "$.trust_marks[0].trust_mark",
                    "check": [
                      {
                        "in": "payload",
                        "check regex": "tos_uri.https:\\/\\/(www\\.)?[-\\w@:%.\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-\\w()@:%\\+.~#?&\\/\\/=]*)"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the Trust Mark contain a correct iss claim",
        "description": "In this test, an issued Trust Mark must be taken, decrypted and the iss claim in it is checked. Its value has to be an URL",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Statement response RP",
            "decode operation": [
              {
                "from": "body",
                "type": "jwt",
                "decode param": "[\\s\\S]*",
                "decode operation": [
                  {
                    "from": "jwt payload",
                    "type": "jwt",
                    "decode param": "$.trust_marks[0].trust_mark",
                    "check": [
                      {
                        "in": "payload",
                        "check regex": "iss.https:\\/\\/(www\\.)?[-\\w@:%.\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-\\w()@:%\\+.~#?&\\/\\/=]*)"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the issued oauth_resource Trust Mark contain a correct service_documentation claim",
        "description": "In this test, a Trust Mark issued for an AA (oauth_resource profile) is taken and the service_documentation claim is checked to be an URL",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Statement response RP",
            "decode operation": [
              {
                "from": "body",
                "type": "jwt",
                "decode param": "[\\s\\S]*",
                "decode operation": [
                  {
                    "from": "jwt payload",
                    "type": "jwt",
                    "decode param": "$.trust_marks[0].trust_mark",
                    "check": [
                      {
                        "in": "payload",
                        "check regex": "service_documentation.https:\\/\\/(www\\.)?[-\\w@:%.\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-\\w()@:%\\+.~#?&\\/\\/=]*)"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the Trust Mark contain a correct sub claim",
        "description": "In this test, an issued Trust Mark must be taken, decrypted and the sub claim in it is checked. Its value has to be an URL",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Statement response RP",
            "decode operation": [
              {
                "from": "body",
                "type": "jwt",
                "decode param": "[\\s\\S]*",
                "decode operation": [
                  {
                    "from": "jwt payload",
                    "type": "jwt",
                    "decode param": "$.trust_marks[0].trust_mark",
                    "check": [
                      {
                        "in": "payload",
                        "check regex": "sub.https:\\/\\/(www\\.)?[-\\w@:%.\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-\\w()@:%\\+.~#?&\\/\\/=]*)"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    }
  ]
}