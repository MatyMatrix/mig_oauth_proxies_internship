{
  "test suite": {
    "name": "SA",
    "description": "HTTP parameter type",
    "filter messages": true
  },
  "tests": [
    {
      "test": {
        "name": "Does the entity configuration of a considered entity return a Federation Metadata in JOSE format when an HTTP GET request is made to its .well-known/openid-federation endpoint",
        "description": "The considered entity must have published its entity configuration in the .well-known/openid-federation endpoint. So in this test, an HTTP GET request is made to the entity's .well-known/openid-federation endpoint (appended to the URL which identifies the entity) and the response is analyzed. This response has to be the entity configuration of the entity and therefore a Federation Metadata in JOSE format (Content-Type: application/entity-statement+jwt)",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Configuration response SA",
            "checks": [
              {
                "in": "body",
                "check regex": "([\\w=]+)\\.([\\w=]+)\\.([\\w\\-\\+\\/=]*)",
                "is present": "true"
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the Entity expose the resolve entity statement endpoint",
        "description": "In order to check the presence and correctness of the resolve entity statement endpoint, an HTTP GET request containing the parameters 'sub', 'anchor' and 'type' is made to the entity's endpoint and an HTTP 200 OK response containing the resolved metadata for the entity in the request's sub claim is expected.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Resolve Entity Statement response",
            "checks": [
              {
                "in": "body",
                "check regex": "[\\s*\"[^\"]*\"(?:,\\s*\"[^\"]*\")*\\s*\\]$",
                "is present": "true"
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the Entity expose the entity listing endpoint",
        "description": "In order to check the presence and correctness of the resolve entity statement endpoint, an HTTP GET request entity's endpoint. An HTTP 200 OK response containing a JSON list with the known Entity Identifiers is expected",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Listing response",
            "checks": [
              {
                "in": "body",
                "check regex": "[\\s\\S]*.^\\{(\\s*\"[^\"]*\"\\s*:\\s*(?:\"[^\"]*\",?|\\[[\\S\\s]*\\],?|\\{[\\S\\s]*\\},?)\\s*)*\\}$",
                "is present": "true"
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the SA correctly release the Entity statements",
        "description": "After a correct onboarding with the SA, it must publish the entity statement for the subordinate entity in its fetch endpoint. So, in this test, once correctly registered an Entity, an HTTP GET request is made to the SA's fetch endpoint, with the request containing the Entity identifier. The response is then checked and it must contain the subordinate entity's Entity Statement.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Statement response OP",
            "checks": [
              {
                "in": "body",
                "check regex": "[\\s\\S]*.^([\\w=]+)\\.([\\w=]+)\\.([\\w\\-\\+\\/=]*)",
                "is present": "true"
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the SA correctly release the Entity statements",
        "description": "After a correct onboarding with the SA, it must publish the entity statement for the subordinate entity in its fetch endpoint. So, in this test, once correctly registered an Entity, an HTTP GET request is made to the SA's fetch endpoint, with the request containing the Entity identifier. The response is then checked and it must contain the subordinate entity's Entity Statement.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Entity Statement response RP",
            "checks": [
              {
                "in": "body",
                "check regex": "[\\s\\S]*.^([\\w=]+)\\.([\\w=]+)\\.([\\w\\-\\+\\/=]*)",
                "is present": "true"
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the Entity expose the fetch entity statement endpoint",
        "description": "In order to check the presence and correctness of the fetch entity statement endpoint, an HTTP GET request containing the parameters 'iss' and 'sub' is made to the entity's endpoint and a response containing the resolved metadata for the entity in the request's sub claim is expected.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Fetch Entity Statement response SA OP",
            "checks": [
              {
                "in": "body",
                "check regex": "[\\s\\S]*.^([\\w=]+)\\.([\\w=]+)\\.([\\w\\-\\+\\/=]*)",
                "is present": "true"
              }
            ]
          }
        ]
      }
    },
    {
      "test": {
        "name": "Does the Entity expose the fetch entity statement endpoint",
        "description": "In order to check the presence and correctness of the fetch entity statement endpoint, an HTTP GET request containing the parameters 'iss' and 'sub' is made to the entity's endpoint and a response containing the resolved metadata for the entity in the request's sub claim is expected.",
        "type": "passive",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "message type": "Fetch Entity Statement response SA RP",
            "checks": [
              {
                "in": "body",
                "check regex": "[\\s\\S]*.^([\\w=]+)\\.([\\w=]+)\\.([\\w\\-\\+\\/=]*)",
                "is present": "true"
              }
            ]
          }
        ]
      }
    }
  ]
}