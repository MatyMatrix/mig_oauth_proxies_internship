{
  "test suite": {
    "name": "OP",
    "description": "Param Response",
    "filter messages": true
  },
  "tests": [
    {
      "test": {
        "name": "Does the OP refuse Authentication Requests without the code_challenge parameter",
        "description": "The 'code_challenge' parameter in an authentication request is part of the PKCE protocol and is useful against various attacks. In order to test if the OP checks this parameter, an authorization request is sent without the client_id in the JWT and the answer is analyzed",
        "type": "active",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "session": "s1",
            "action": "start"
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Authentication request",
            "message operations": [
              {
                "from": "url",
                "in": "",
                "edit": "code_challenge"
              }
            ]
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Authentication response",
            "checks": [
              {
                "in": "head",
                "check regex": "HTTP/?\\d?\\.?\\d?\\s302"
              },
              {
                "in": "head",
                "check": "invalid_request"
              }
            ]
          }
        ],
        "result": "assert_only"
      }
    },
    {
      "test": {
        "name": "Does the OP refuse Authentication Requests without the code_challenge_method parameter",
        "description": "The 'code_challenge_method' parameter in an authentication request says to the OP how to verify the code_challenge when receiving the token request. If one request has a wrong code_challenge_method, than the OP will not be able to verify this parameter. In order to test the OP's behavior, an Authenticaton request is sent without code_challenge_method and the answer is analyzed",
        "type": "active",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "session": "s1",
            "action": "start"
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Authentication request",
            "message operations": [
              {
                "from": "url",
                "in": "",
                "edit": "code_challenge_method"
              }
            ]
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Authentication response",
            "checks": [
              {
                "in": "head",
                "check regex": "HTTP/?\\d?\\.?\\d?\\s302"
              },
              {
                "in": "head",
                "check": "invalid_request"
              }
            ]
          }
        ],
        "result": "assert_only"
      }
    },
    {
      "test": {
        "name": "Does the OP refuse Authentication Requests without the request parameter",
        "description": "The 'request' parameter in an authentication request is crucial to authenticate and answer correctly. If a request is missing the request parameter, than the OP should refuse it. In order to test the OP's behavior, an Authenticaton request is sent without request parameter in the URL and the answer is analyzed",
        "type": "active",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "session": "s1",
            "action": "start"
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Authentication request",
            "message operations": [
              {
                "from": "url",
                "in": "",
                "edit": "request"
              }
            ]
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Authentication response",
            "checks": [
              {
                "in": "head",
                "check regex": "HTTP/?\\d?\\.?\\d?\\s302"
              },
              {
                "in": "head",
                "check": "invalid_request"
              }
            ]
          }
        ],
        "result": "assert_only"
      }
    },
    {
      "test": {
        "name": "Does the OP refuse Authentication Requests with the request parameter that is not a JWT",
        "description": "The 'request' parameter in an authentication request is crucial to authenticate and answer correctly. If a request has a request parameter, that is not a JWT, it means that the OP should refuse it. In order to test the OP's behavior, an Authenticaton request is sent with a random value in the request parameter in the URL and the answer is analyzed",
        "type": "active",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "session": "s1",
            "action": "start"
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Authentication request",
            "message operations": [
              {
                "from": "url",
                "in": "example",
                "edit": "request"
              }
            ]
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Authentication response",
            "checks": [
              {
                "in": "head",
                "check regex": "HTTP/?\\d?\\.?\\d?\\s302"
              },
              {
                "in": "head",
                "check": "invalid_request"
              }
            ]
          }
        ],
        "result": "assert_only"
      }
    },
    {
      "test": {
        "name": "Does the OP refuse Authentication Requests without the scope parameter in the URL",
        "description": "An Authentication Request is sent without the iss parameter in the URL of the request (scope in the HTTP request)",
        "type": "active",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "session": "s1",
            "action": "start"
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Authentication request",
            "message operations": [
              {
                "from": "url",
                "in": "",
                "edit": "scope"
              }
            ]
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Authentication response",
            "checks": [
              {
                "in": "head",
                "check regex": "HTTP/?\\d?\\.?\\d?\\s302"
              },
              {
                "in": "head",
                "check": "invalid_request"
              }
            ]
          }
        ],
        "result": "assert_only"
      }
    },
    {
      "test": {
        "name": "Does the OP accept introspection requests without the client assertion type",
        "description": "An introspection request without the client_assertion_type parameter is sent and the response analyzed",
        "type": "active",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "session": "s1",
            "action": "start"
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Introspection request",
            "message operations": [
              {
                "from": "body",
                "in": "",
                "edit regex": "(?<=client_assertion_type=)([^&]+)"
              }
            ]
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Introspection response",
            "checks": [
              {
                "in": "head",
                "check regex": "HTTP/?\\d?\\.?\\d?\\s400"
              },
              {
                "in": "body",
                "check": "invalid_request"
              }
            ]
          }
        ],
        "result": "assert_only"
      }
    },
    {
      "test": {
        "name": "Does the OP accept introspection requests with a wrong client assertion type",
        "description": "An introspection request with a wrong value in the client_assertion_type parameter is sent and the response analyzed",
        "type": "active",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "session": "s1",
            "action": "start"
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Introspection request",
            "message operations": [
              {
                "from": "body",
                "in": "X_chiave_core_RP",
                "edit regex": "(?<=client_assertion_type=)([^&]+)"
              }
            ]
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Introspection response",
            "checks": [
              {
                "in": "head",
                "check regex": "HTTP/?\\d?\\.?\\d?\\s400"
              },
              {
                "in": "body",
                "check": "invalid_request"
              }
            ]
          }
        ],
        "result": "assert_only"
      }
    },
    {
      "test": {
        "name": "Does the OP accept introspection requests without the client id",
        "description": "To test if an OP verifies the presence of the client id of the RP in the Introspection request, a request without the client id is sent and the response is analyzed.",
        "type": "active",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "session": "s1",
            "action": "start"
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Introspection request",
            "message operations": [
              {
                "from": "body",
                "in": "",
                "edit regex": "(?<=client_id=)([^&]+)"
              }
            ]
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Introspection response",
            "checks": [
              {
                "in": "head",
                "check regex": "HTTP/?\\d?\\.?\\d?\\s401"
              },
              {
                "in": "body",
                "check": "invalid_client"
              }
            ]
          }
        ],
        "result": "assert_only"
      }
    },
    {
      "test": {
        "name": "Does the OP verify the client id of the Introspection Request",
        "description": "To test if an OP verifies the presence of the client id of the RP in the Introspection request, a request with a wrong client id (not present in the federation) is sent and the response is analyzed.",
        "type": "active",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "session": "s1",
            "action": "start"
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Introspection request",
            "message operations": [
              {
                "from": "body",
                "in": "https://www.example.com/",
                "edit regex": "(?<=client_id=)([^&]+)"
              }
            ]
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Introspection response",
            "checks": [
              {
                "in": "head",
                "check regex": "HTTP/?\\d?\\.?\\d?\\s401"
              },
              {
                "in": "body",
                "check": "invalid_client"
              }
            ]
          }
        ],
        "result": "assert_only"
      }
    },
    {
      "test": {
        "name": "How does the OP behave when receiving an introspection request without the token",
        "description": "An introspection request without a token is sent and the introspection response analyzed",
        "type": "active",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "session": "s1",
            "action": "start"
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Introspection request",
            "message operations": [
              {
                "from": "url",
                "in": "",
                "edit": "token"
              }
            ]
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Introspection response",
            "checks": [
              {
                "in": "head",
                "check regex": "HTTP/?\\d?\\.?\\d?\\s400"
              },
              {
                "in": "body",
                "check": "invalid_request"
              }
            ]
          }
        ],
        "result": "assert_only"
      }
    },
    {
      "test": {
        "name": "How does the OP behave when receiving an introspection request with a wrong token",
        "description": "An introspection request with a token not valid is sent and the introspection response analyzed",
        "type": "active",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "session": "s1",
            "action": "start"
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Introspection request",
            "message operations": [
              {
                "from": "url",
                "in": "X_chiave_core_RP",
                "edit": "token"
              }
            ]
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Introspection response",
            "checks": [
              {
                "in": "head",
                "check regex": "HTTP/?\\d?\\.?\\d?\\s400"
              },
              {
                "in": "body",
                "check": "invalid_request"
              }
            ]
          }
        ],
        "result": "assert_only"
      }
    },
    {
      "test": {
        "name": "Does the OP accept Revocation Requests without the client assertion type",
        "description": "To test if an OP verifies the presence of the client assertion type in the Revocation request, a request withiout client assertion type is sent and the response is analyzed.",
        "type": "active",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "session": "s1",
            "action": "start"
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Revocation request",
            "message operations": [
              {
                "from": "body",
                "in": "",
                "edit regex": "(?<=client_assertion_type=)([^&]+)"
              }
            ]
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Revocation response",
            "checks": [
              {
                "in": "head",
                "check regex": "HTTP/?\\d?\\.?\\d?\\s400"
              },
              {
                "in": "body",
                "check": "invalid_request"
              }
            ]
          }
        ],
        "result": "assert_only"
      }
    },
    {
      "test": {
        "name": "Does the OP verify the client assertion type of the Revocation Request",
        "description": "To test if an OP verifies the client assertion type in the Revocation request, a request with a wrong client_assertion_type parameter is sent and the response is analyzed.",
        "type": "active",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "session": "s1",
            "action": "start"
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Revocation request",
            "message operations": [
              {
                "from": "body",
                "in": "urn-ietf",
                "edit regex": "(?<=client_assertion_type=)([^&]+)"
              }
            ]
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Revocation response",
            "checks": [
              {
                "in": "head",
                "check regex": "HTTP/?\\d?\\.?\\d?\\s400"
              },
              {
                "in": "body",
                "check": "invalid_request"
              }
            ]
          }
        ],
        "result": "assert_only"
      }
    },
    {
      "test": {
        "name": "Does the OP accept revocation request without the client assertion",
        "description": "In order to verify if the OP checks the presence of the client_assertion parameter in a revocation request, such a request is sent without the client_assertion and the OP's response is analyzed",
        "type": "active",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "session": "s1",
            "action": "start"
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Revocation request",
            "message operations": [
              {
                "from": "body",
                "in": "",
                "edit regex": "(?<=client_assertion=)([^&]+)"
              }
            ]
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Revocation response",
            "checks": [
              {
                "in": "head",
                "check regex": "HTTP/?\\d?\\.?\\d?\\s401"
              },
              {
                "in": "body",
                "check": "invalid_client"
              }
            ]
          }
        ],
        "result": "assert_only"
      }
    },
    {
      "test": {
        "name": "Does the OP accept Revocation Requests without the client id",
        "description": "To test if an OP verifies the presence of the client id of the RP in the Revocation request, a request without the client id is sent and the response is analyzed.",
        "type": "active",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "session": "s1",
            "action": "start"
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Revocation request",
            "message operations": [
              {
                "from": "body",
                "in": "",
                "edit regex": "(?<=client_id=)([^&]+)"
              }
            ]
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Revocation response",
            "checks": [
              {
                "in": "head",
                "check regex": "HTTP/?\\d?\\.?\\d?\\s401"
              },
              {
                "in": "body",
                "check": "invalid_client"
              }
            ]
          }
        ],
        "result": "assert_only"
      }
    },
    {
      "test": {
        "name": "Does the OP verify the client id of the Revocation Request",
        "description": "To test if an OP verifies the presence of the client id of the RP in the Revocation request, a request with a wrong client id (not present in the federation) is sent and the response is analyzed.",
        "type": "active",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "session": "s1",
            "action": "start"
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Revocation request",
            "message operations": [
              {
                "from": "body",
                "in": "https://www.example.com/",
                "edit regex": "(?<=client_id=)([^&]+)"
              }
            ]
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Revocation response",
            "checks": [
              {
                "in": "head",
                "check regex": "HTTP/?\\d?\\.?\\d?\\s401"
              },
              {
                "in": "body",
                "check": "invalid_client"
              }
            ]
          }
        ],
        "result": "assert_only"
      }
    },
    {
      "test": {
        "name": "Does the OP verify the presence of token in the Revocation request",
        "description": "Since the OP has to verify the client assertion in the Revocation Request, this test consist in intercepting a legitimate request and remove token.",
        "type": "active",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "session": "s1",
            "action": "start"
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Revocation request",
            "message operations": [
              {
                "from": "body",
                "in": "",
                "edit regex": "(?<=token=)([^&]+)"
              }
            ]
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Revocation response",
            "checks": [
              {
                "in": "head",
                "check regex": "HTTP/?\\d?\\.?\\d?\\s400"
              },
              {
                "in": "body",
                "check": "invalid_request"
              }
            ]
          }
        ],
        "result": "assert_only"
      }
    },
    {
      "test": {
        "name": "Does the token response to a token request made without the client_assertion_type parameter return a Token Error response",
        "description": "This test consists in sending a token request without the client_assertion_type parameter and analyzing the token response. The response must be a Token Error response.",
        "type": "active",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "session": "s1",
            "action": "start"
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Token request",
            "message operations": [
              {
                "from": "body",
                "in": "",
                "edit regex": "(?<=client_assertion_type=)([^&]+)"
              }
            ]
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Token response",
            "checks": [
              {
                "in": "head",
                "check regex": "HTTP/?\\d?\\.?\\d?\\s400"
              },
              {
                "in": "body",
                "check": "invalid_request"
              }
            ]
          }
        ],
        "result": "assert_only"
      }
    },
    {
      "test": {
        "name": "Does the token response to a token request made with an incorrect client_assertion_type parameter return a Token Error response",
        "description": "This test consists in sending a token request with a wrong client_assertion_type parameter and analyzing the token response. The response must be a Token Error response.",
        "type": "active",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "session": "s1",
            "action": "start"
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Token request",
            "message operations": [
              {
                "from": "body",
                "in": "urn-aert",
                "edit regex": "(?<=client_assertion_type=)([^&]+)"
              }
            ]
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Token response",
            "checks": [
              {
                "in": "head",
                "check regex": "HTTP/?\\d?\\.?\\d?\\s400"
              },
              {
                "in": "body",
                "check": "invalid_request"
              }
            ]
          }
        ],
        "result": "assert_only"
      }
    },
    {
      "test": {
        "name": "Does the token response to a token request made without the client_assertion parameter return a Token Error response",
        "description": "This test consists in sending a token request without the client_assertion parameter and analyzing the token response. The response must be a Token Error response.",
        "type": "active",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "session": "s1",
            "action": "start"
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Token request",
            "message operations": [
              {
                "from": "body",
                "in": "",
                "edit regex": "(?<=client_assertion=)([^&]+)"
              }
            ]
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Token response",
            "checks": [
              {
                "in": "head",
                "check regex": "HTTP/?\\d?\\.?\\d?\\s401"
              },
              {
                "in": "body",
                "check": "invalid_client"
              }
            ]
          }
        ],
        "result": "assert_only"
      }
    },
    {
      "test": {
        "name": "Does the OP check the client_id in the request",
        "description": "In this test the client_id parameter in the URL of the token request is removed and the response analyzed",
        "type": "active",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "session": "s1",
            "action": "start"
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Token request",
            "message operations": [
              {
                "from": "body",
                "in": "",
                "edit regex": "(?<=client_id=)([^&]+)"
              }
            ]
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Token response",
            "checks": [
              {
                "in": "head",
                "check regex": "HTTP/?\\d?\\.?\\d?\\s400"
              },
              {
                "in": "body",
                "check": "invalid_request"
              }
            ]
          }
        ],
        "result": "assert_only"
      }
    },
    {
      "test": {
        "name": "Does the OP require the client_id in the token request",
        "description": "This test consists in sending a token request without the client_id parameter and analyzing the token response. The response must be a Token Error response.",
        "type": "active",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "session": "s1",
            "action": "start"
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Token request",
            "message operations": [
              {
                "from": "body",
                "in": "",
                "edit regex": "(?<=client_id=)([^&]+)"
              }
            ]
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Token response",
            "checks": [
              {
                "in": "head",
                "check regex": "HTTP/?\\d?\\.?\\d?\\s401"
              },
              {
                "in": "body",
                "check": "invalid_client"
              }
            ]
          }
        ],
        "result": "assert_only"
      }
    },
    {
      "test": {
        "name": "Does the token response to a token request made without the code_verifier parameter return a Token Error response",
        "description": "This test consists in sending a token request without the code_verifier parameter and analyzing the token response. The response must be a Token Error response.",
        "type": "active",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "session": "s1",
            "action": "start"
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Token request",
            "message operations": [
              {
                "from": "body",
                "in": "",
                "edit regex": "(?<=code_verifier=)([^&]+)"
              }
            ]
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Token response",
            "checks": [
              {
                "in": "head",
                "check regex": "HTTP/?\\d?\\.?\\d?\\s400"
              },
              {
                "in": "body",
                "check": "invalid_grant"
              }
            ]
          }
        ],
        "result": "assert_only"
      }
    },
    {
      "test": {
        "name": "Does the token response to a token request made with an incorrect code_verifier parameter return a Token Error response",
        "description": "This test consists in sending a token request with a wrong code_verifier parameter and analyzing the token response. The response must be a Token Error response.",
        "type": "active",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "session": "s1",
            "action": "start"
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Token request",
            "message operations": [
              {
                "from": "body",
                "in": "X_chiave_core_RP",
                "edit regex": "(?<=code_verifier=)([^&]+)"
              }
            ]
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Token response",
            "checks": [
              {
                "in": "head",
                "check regex": "HTTP/?\\d?\\.?\\d?\\s400"
              },
              {
                "in": "body",
                "check": "invalid_request"
              }
            ]
          }
        ],
        "result": "assert_only"
      }
    },
    {
      "test": {
        "name": "Does the token response to a token request made without the code parameter return a Token Error response",
        "description": "This test consists in sending a token request without the code parameter and analyzing the token response. The response must be a Token Error response.",
        "type": "active",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "session": "s1",
            "action": "start"
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Token request",
            "message operations": [
              {
                "from": "body",
                "in": "",
                "edit regex": "(?<=code=)([^&]+)"
              }
            ]
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Token response",
            "checks": [
              {
                "in": "head",
                "check regex": "HTTP/?\\d?\\.?\\d?\\s400"
              },
              {
                "in": "body",
                "check": "invalid_grant"
              }
            ]
          }
        ],
        "result": "assert_only"
      }
    },
    {
      "test": {
        "name": "Does the token response to a token request made with an incorrect code parameter (i.e., not belonging to that client ID or a random code) return a Token Error response",
        "description": "This test consists in sending a token request with a wrong code parameter (thus not for that client ID or a random code) and analyzing the token response. The response must be a Token Error response.",
        "type": "active",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "session": "s1",
            "action": "start"
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Token request",
            "message operations": [
              {
                "from": "body",
                "in": "X_chiave_core_RP",
                "edit regex": "(?<=code=)([^&]+)"
              }
            ]
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Token response",
            "checks": [
              {
                "in": "head",
                "check regex": "HTTP/?\\d?\\.?\\d?\\s400"
              },
              {
                "in": "body",
                "check": "invalid_grant"
              }
            ]
          }
        ],
        "result": "assert_only"
      }
    },
    {
      "test": {
        "name": "Does the token response to a token request made without the grant_type parameter return a Token Error response",
        "description": "This test consists in sending a token request without the grant_type parameter and analyzing the token response. The response must be a Token Error response.",
        "type": "active",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "session": "s1",
            "action": "start"
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Token request",
            "message operations": [
              {
                "from": "body",
                "in": "",
                "edit regex": "(?<=grant_type=)([^&]+)"
              }
            ]
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Token response",
            "checks": [
              {
                "in": "head",
                "check regex": "HTTP/?\\d?\\.?\\d?\\s400"
              },
              {
                "in": "body",
                "check": "invalid_request"
              }
            ]
          }
        ],
        "result": "assert_only"
      }
    },
    {
      "test": {
        "name": "Does the OP checks that the token request contains the grant_type parameter set correctly",
        "description": "In order to validate if the OP checks the token request sent by the RP, in this test we send the grant_type parameter in the request set to and invalid value, just like 'example' and analyze the response",
        "type": "active",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "session": "s1",
            "action": "start"
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Token request",
            "message operations": [
              {
                "from": "body",
                "in": "example",
                "edit regex": "(?<=grant_type=)([^&]+)"
              }
            ]
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "Token response",
            "checks": [
              {
                "in": "head",
                "check regex": "HTTP/?\\d?\\.?\\d?\\s400"
              },
              {
                "in": "body",
                "check": "unsupported_grant_type"
              }
            ]
          }
        ],
        "result": "assert_only"
      }
    },
    {
      "test": {
        "name": "How does the OP behave when the token in the userinfo request is missing",
        "description": "A userinfo request without the 'Authorization: Bearer ...' field is made and the response analyzed",
        "type": "active",
        "sessions": [
          "s1"
        ],
        "operations": [
          {
            "session": "s1",
            "action": "start"
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "UserInfo request",
            "message operations": [
              {
                "from": "head",
                "in": "",
                "edit": "Authorization"
              }
            ]
          },
          {
            "action": "intercept",
            "from session": "s1",
            "then": "forward",
            "message type": "UserInfo response",
            "checks": [
              {
                "in": "head",
                "check regex": "HTTP/?\\d?\\.?\\d?\\s400"
              },
              {
                "in": "body",
                "check": "invalid_request"
              }
            ]
          }
        ],
        "result": "assert_only"
      }
    }
  ]
}